* 2018
** April
*** 11
6 hours actual
- Initial set up
- Research TD350
- Fight with Lenovo software RAID
- Install CentOS 7
- Register for Intel Opensource Development
*** 12
4 hours actual
- Install ClearLinux
- Fight with ClearLinux Xorg
*** 13
5 hours actual
- Describe to A difference between client & server
- Brainstorm workarounds for network topology 
- Research graphics drivers for ClearLinux
- Install ASPEED 'ast' drivers, and update xorg.conf.d to include 
#+NAME: 25-ast.conf
#+BEGIN_SRC
Section Device
  Driver "ast"
EndSection
#+END_SRC
*** 14
6 hours actual
- Attempt compilation of RStudio
- Get frustrated using broken head/master
- workaround for dependencies - lots of bundles installed since clearlinux uses nonstandard package man
- checkout version 1.2 because there's an error in master
- get frustrating build errors
- realize initialize-common has put newer files into build directory
- start over by cloning 1.2 in a new directory
- run into qt5 error building some qt-gstreamer (that I don't even need)
- download qt5
- @#$% qt5
- figure out qt-gstreamer isn't what I need anyways
- gstreamer updates: see https://openwebcraft.com/notes/clearlinux-rstudio-install/
  - goddam i have to diff the version? how did this ever get included in RStudio?
  - have to build the gst-plugins-base lib folder by hand. that's what's needed anyways.
  - use LD_USE_DIR (or whatever it is) smartly to avoid ln-ing a bunch of links to /usr/lib which is where make is searching for the libraries.?
  - don't forget to make -j16 to waste less time compiling
 - BUILT ALL TARGETS!!!!!!11!!!
 - make install?
 - compiling permutations? why not threaded?
 - FINALLY RSTUDIO COMPILED
 - ALMOST RUNS need some other libraries, so compile qt5, what a beast
 - IT WORKED - I'm amazed. But Rstudio needs some of these libs, and can't find them
 - link libraries again by hand. there must be a better way
 - RSTUDIO WORKS!!!!!! Hacky kludges.
 - Packing it in for the day.
   
** May
*** 5
4 hours actual
 - Instaled graphics card
 - Installed wireless NIC
 - Installing Ubuntu Desktop 18.04LTS (tradeoff of speed/maintainability by Amber)
 - Formatting software RAID drives that couldn't be repartitioned in Ubuntu
 - Reinstalling Ubuntu Desktop
 - Fiddling with BIOS settings
 - Graphics card works with BIOS, but hangs UEFI boot
 - Got things booting & NVidia card installed with
#+BEGIN_SRC
sudo apt update
sudo apt upgrade
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update
#+END_SRC
 - Install RStudio by downloading .deb from RStudio website
#+BEGIN_SRC
sudo apt install r-base
sudo apt ingtall gdebi-core // perhaps unneccesary?
#-END_SRC
 - Goto rstudio website & download.
 - Install git & ungit
#+BEGIN_SRC
sudo apt install git
sudo apt install npm
sudo -H npm install -g ungit
#+END_SRC
**** TODO Create custom settings for ungit https://github.com/FredrikNoren/ungit
- install some benchmarking scripts from https://github.com/alexisph/high_performance_r
- start download of Intel CC & math libraries
  
*** 6
**** TODO Compile R from Source using ICC and MKL
[[https://aciref.org/on-building-a-fast-r-environment/][Building a fast R environment using ICC and MKL]]

***** TODO Install ICC
- trouble with 32 bit libs; probably installed a bunch of cruft by accident

[[https://software.intel.com/en-us/articles/installing-intel-parallel-studio-xe-runtime-2018-using-apt-repository][Intel Parallell Studio Runtime Libraries (including 32-bit runtime)]]
[[https://software.intel.com/en-us/articles/intel-c-compiler-180-for-linux-release-notes-for-intel-parallel-studio-xe-2018#sysreq][System Requirements - 32 bit libraries listed]]
- FIXED: You can disable cross compilation for ia32 in the install screen. didn't notice it for a long time.
***** Set MKL Variables

#+BEGIN_SRC sh 
. /opt/intel/mkl/bin/mklvars.sh intel64
. /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64
#+END_SRC

#+BEGIN_SRC sh
export CC=icc
export CXX=icpc
export F77=ifort
export FC=ifort
export AR=xiar
export LD=xild
export ICROOT="/opt/intel"
export CPPFLAGS="-I$ICROOT/include -I$MKLROOT/include -I$MKLROOT/include/fftw -I/usr/include -D__PURE_INTEL_C99_HEADERS__"
export CFLAGS="-axCORE-AVX2 -O3 -ipo -qopenmp -fPIC -DMKL_ILP64 -nostdinc -isystem /opt/intel/include"
export CXXFLAGS="-axCORE-AVX2 -O3 -ipo -qopenmp -fPI -DMKL_ILP64"
export FFLAGS="-axCORE-AVX2 -O3 -ipo -qopenmp -fPIC -DMKL_ILP64"
export LDFLAGS="-L$ICROOT/mkl/lib/intel64 -L$ICROOT/lib/intel64 -L$ICROOT/lib/intel64_lin -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl"
export LD_LIBRARY_PATH="$ICROOT/mkl/lib:$ICROOT/mkl/lib/intel64:$ICROOT/mkl/lib/intel64_lin:$ICROOT/lib/intel64:$ICROOT/lib/intel64_lin:$ICROOT/lib/intel64_lin_gfx"
#+END_SRC


-L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl


-Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -L$ICROOT/lib/intel64 -L$ICROOT/lib/intel64_lin -liomp5 -lpthread -lm -ldl




-Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a \
${MKLROOT}/lib/intel64/libmkl_intel_thread.a \
${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group \
-liomp5 -lpthread -lm -ldl

#+RESULTS:

Go to R source directory

–enable-R-profiling –enable-R-shlib –enable-memory-profiling \
–enable-java –enable-shared=yes –with-blas=”$LDFLAGS” \
–with-readline –with-tcltk –with-libpng –with-jpeglib –with-libtiff \
–with-ICU –with-pic –with-x –with-lapack



#+BEGIN_SRC sh

mkdir build
cd build
../configure --prefix=/opt/R/3.3.5i --enable-R-profiling --enable-R-shlib --enable-memory-profiling --enable-java --enable-shared=yes --with-blas="$LDFLAGS" --with-readline --with-tcltk --with-libpng --with-jpeglib --with-libtiff --with-ICU --with-pic --with-x --with-lapack --enable-lto F77=${F77} FC={$FC}
#+END_SRC 

***** TODO Clone R Base
***** TODO Make Build Etc.

**** 7
- Started at 7
- fighting with 18.04 compatibility issues.
- https://www.scivision.co/install-intel-compiler-icc-icpc-ifort/
